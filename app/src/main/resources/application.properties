# Server Port Configuration
server.port=8080

# --- MySQL Configuration ---
# JDBC URL for connecting to the MySQL database.
# 'cms' is the database name.
# useSSL=false: Disables SSL for development (enable for production).
# serverTimezone=UTC: Ensures consistent timezone handling.
# allowPublicKeyRetrieval=True: Required for some newer MySQL versions with certain authentication methods.
spring.datasource.url=jdbc:mysql://localhost:3306/cms?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrievel=True
# Username for MySQL database access.
spring.datasource.username=pguelfi
# Password for MySQL database access.
spring.datasource.password=pg123456
# JDBC driver class name for MySQL.
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# --- JPA/Hibernate Configuration for MySQL ---
# ddl-auto=update: Hibernate will update the database schema based on your JPA entities.
#                  This is convenient for development but 'validate' or 'none' is preferred for production.
spring.jpa.hibernate.ddl.auto=update
# show-sql=true: Logs all SQL statements executed by Hibernate. Useful for debugging.
spring.jpa.show-sql=true
# dialect: Specifies the SQL dialect used by Hibernate for MySQL 8.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# --- MongoDB Configuration ---
# Hostname where MongoDB is running.
spring.data.mongodb.host=localhost
# Port number for MongoDB.
spring.data.mongodb.port=27017
# Name of the MongoDB database, matching the lab instructions ('prescriptions' database).
spring.data.mongodb.database=prescriptions

# Spring DevTools for hot reloading (optional, but recommended for development)
spring.devtools.restart.enabled=true

# Thymeleaf Configuration
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.encoding=UTF-8
# Disable caching for development; set to true for production
spring.thymeleaf.cache=false
spring.thymeleaf.check-template-location=true

# Static Resources Configuration
# This setting tells Spring Boot where to look for static assets (e.g., CSS, JS, images).
# Files placed in src/main/resources/static/ will be served directly by Spring without the need for a controller.
spring.web.resources.static-locations=classpath:/static/

# --- JWT Configuration ---
# A simple secret key for JWT tokens. FOR DEVELOPMENT ONLY.
# In a production environment, this should be a strong, randomly generated, base64-encoded string,
# and managed securely (e.g., via environment variables).
#jwt.secret=supersecretkeyforclinicappdev
jwt.secret=V3ryStr0ngS3cr3tK3yWith$pecialChars123!
